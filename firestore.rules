
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all access if no other rule matches.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Helper Functions ---
    // Checks if a user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Checks if the request is creating a new document with required IDs.
    function isCreatingWithRequiredIds() {
      return request.resource.data.creatorUserId != null
          && request.resource.data.companyId != null;
    }

    // --- Collection Rules ---

    // Rules for 'companies'
    match /companies/{companyId} {
      // Any authenticated user can create a company
      allow create: if isAuthenticated() && request.resource.data.createdBy == request.auth.uid;
      
      // Allow any authenticated user to read companies for company verification
      allow read: if isAuthenticated();
      
      // Only allow update/delete by company creator or members
      allow update, delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        exists(/databases/$(database)/documents/teamMembers/$(request.auth.uid + '_' + companyId))
      );
      
      // Rules for team members subcollection
      match /teamMembers/{memberId} {
        allow read, write: if isAuthenticated();
      }
    }

    // Rules for 'teamMembers' collection
    match /teamMembers/{memberId} {
      // Any authenticated user can create team member invitations
      allow create: if isAuthenticated() && request.resource.data.invitedBy == request.auth.uid;
      
      // Allow reading and updating team member data for authenticated users
      allow read, update: if isAuthenticated();
      
      // Allow deletion by the inviter or company admin
      allow delete: if isAuthenticated();
    }

    // Rules for 'journalEntries'
    match /journalEntries/{entryId} {
      // Any authenticated user can create an entry.
      allow create: if isAuthenticated() && isCreatingWithRequiredIds();
      
      // Any authenticated user can read, update, or delete an entry
      // within a company. This enables team collaboration.
      // For stricter control, you could check against a list of company members.
      allow read, update, delete: if isAuthenticated() && resource.data.companyId != null;
    }

    // Rules for 'invoices'
    match /invoices/{invoiceId} {
      // Any authenticated user can create an invoice.
      allow create: if isAuthenticated() && isCreatingWithRequiredIds();

      // Any authenticated user can read, update, or delete an invoice
      // within a company. This enables team collaboration.
      allow read, update, delete: if isAuthenticated() && resource.data.companyId != null;
    }

    // Rules for company-level settings.
    // The document ID for these settings IS the companyId.
    match /companySettings/{companyId} {
      // Allow authenticated users to read/write settings for companies they have access to
      allow read, write: if isAuthenticated() && (
        exists(/databases/$(database)/documents/companies/$(companyId)) ||
        exists(/databases/$(database)/documents/teamMembers/$(request.auth.uid + '_' + companyId))
      );
    }

    match /aiPreferencesSettings/{companyId} {
      // Any authenticated user can read or write settings for any company.
      // Consider adding a company membership check for stricter security.
      allow read, write: if isAuthenticated();
    }

    // Rules for 'notifications'
    match /notifications/{notificationId} {
      allow create: if isAuthenticated() && request.resource.data.companyId != null;
      allow read: if isAuthenticated() && resource.data.companyId != null;
      // Notifications are immutable once created.
      allow update, delete: if false;
    }
  }
}
